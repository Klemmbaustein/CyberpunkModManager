# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Make Release
run-name: Create Release

# Creates Windows and Linux builds if there is any change on the master branch, then uploads these to GitHub.

on:
  push:
    branches: [ "master" ]

env:
  WINDOWS_BUILD_NAME: CyberpunkModManager-Windows-${{ github.run_number }}
  LINUX_BUILD_NAME: CyberpunkModManager-Linux-${{ github.run_number }}

  WINDOWS_RELEASE_NAME: ModManager-Windows.zip
  LINUX_RELEASE_NAME: ModManager-Linux.tar.gz

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup VS devenv for x86
      uses: seanmiddleditch/gha-setup-vsdevenv@master
      with:
        arch: x86

    - name: Init submodules
      run: git submodule update --init --recursive
      
    - name: Build 7zip
      run: |
        cd Dependencies/7zip/CPP/7zip
        nmake
        
    - name: Setup VS devenv for amd64
      uses: seanmiddleditch/gha-setup-vsdevenv@master
      with:
        arch: amd64

    - name: Run Setup
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: ./Setup.ps1 CI_BUILD

    - name: Build Application
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cmake -S . -B build/ -DCI_BUILD=${{ github.run_number }}
        cmake --build build/ -j 4 --config=Release

    - name: Make release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cd App && ./MakeRelease.ps1

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        path: App/Release
        name: ${{env.WINDOWS_BUILD_NAME}}
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Init submodules
      run: git submodule update --init --recursive
    
    - name: Install dependencies
      run: |
          sudo apt-get update
          sudo apt autoremove --purge snapd
          sudo apt-get install libcurl4-openssl-dev
          sudo apt-get install libglew-dev
          sudo apt-get install libxext-dev libxrandr-dev

    - name: Build Application
      run: |
        cmake -S . -B Build -DCMAKE_BUILD_TYPE=Release -DCI_BUILD=${{ github.run_number }}
        cmake --build Build/ -j 8
        
    - name: Make release
      run: |
        mkdir Release/
        cp -rf App/app/ Release/app/
        cp LICENSE.txt Release/
        cp Build/ModManager Release/CyberpunkModManager

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        path: Release
        name: ${{env.LINUX_BUILD_NAME}}

  release-assets:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    permissions: write-all

    steps:
    - name: Retrieve build Artifacts
      uses: actions/download-artifact@v4
      with:
        path: Release
    
    - name: Compress Artifacts
      run: | 
        cd ${{ github.workspace }}/Release/${{env.WINDOWS_BUILD_NAME}}

        zip -r ${{ github.workspace }}/${{env.WINDOWS_RELEASE_NAME}} ./*

        cd ${{ github.workspace }}/Release/
        mv ${{env.LINUX_BUILD_NAME}} CyberpunkModManager
        ls -R
        chmod +x CyberpunkModManager/CyberpunkModManager
        chmod +x CyberpunkModManager/app/bin/7zz
        tar -czf ${{ github.workspace }}/${{env.LINUX_RELEASE_NAME}} CyberpunkModManager

    - name: List directory
      run: ls -R

    - name: Update release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: latest
        prerelease: false
        title: Build ${{ github.run_number }}
        files: |
          ${{env.WINDOWS_RELEASE_NAME}}
          ${{env.LINUX_RELEASE_NAME}}
 
